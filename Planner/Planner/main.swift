import Foundation

struct Task: Codable {
    let id: UUID
    var title: String
    var isCompleted: Bool
    let creationDate: Date
    var completionDate: Date?
    var priority: Priority
    
    enum Priority: Int, Codable, CaseIterable {
        case low = 1
        case medium = 2
        case high = 3
        
        var symbol: String {
            switch self {
            case .low: return "‚¨áÔ∏è"
            case .medium: return "‚û°Ô∏è"
            case .high: return "‚¨ÜÔ∏è"
            }
        }
    }
}

class TaskManager {
    private var tasks: [Task] = []
    private let fileURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0].appendingPathComponent("tasks.json")
    
    init() {
        loadTasks()
    }
    
    // MARK: - –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    
    func addTask(title: String, priority: Task.Priority) {
        let newTask = Task(
            id: UUID(),
            title: title,
            isCompleted: false,
            creationDate: Date(),
            completionDate: nil,
            priority: priority
        )
        tasks.append(newTask)
        saveTasks()
        print("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: \(title)")
    }
    
    func completeTask(at index: Int) {
        guard index >= 0, index < tasks.count else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏")
            return
        }
        
        tasks[index].isCompleted = true
        tasks[index].completionDate = Date()
        saveTasks()
        print("üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: \(tasks[index].title)")
    }
    
    func deleteTask(at index: Int) {
        guard index >= 0, index < tasks.count else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏")
            return
        }
        
        let title = tasks[index].title
        tasks.remove(at: index)
        saveTasks()
        print("üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: \(title)")
    }
    
    func showAllTasks() {
        print("\nüìã –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:")
        print("====================")
        
        if tasks.isEmpty {
            print("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!")
            return
        }
        
        for (index, task) in tasks.enumerated() {
            let status = task.isCompleted ? "‚úÖ" : "‚åõ"
            let dateString = dateFormatter.string(from: task.creationDate)
            print("\(index + 1). [\(task.priority.symbol)] \(status) \(task.title) (—Å–æ–∑–¥–∞–Ω–æ: \(dateString))")
        }
    }
    
    // MARK: - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    
    func showProductivityAnalytics() {
        let completedTasks = tasks.filter { $0.isCompleted }
        let pendingTasks = tasks.filter { !$0.isCompleted }
        
        print("\nüìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
        print("=========================")
        print("–í—Å–µ–≥–æ –∑–∞–¥–∞—á: \(tasks.count)")
        print("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: \(completedTasks.count) (\(percentage(completedTasks.count, of: tasks.count))%)")
        print("–û—Å—Ç–∞–ª–æ—Å—å: \(pendingTasks.count) (\(percentage(pendingTasks.count, of: tasks.count))%)")
        
        if !completedTasks.isEmpty {
            let avgCompletionTime = averageCompletionTime()
            print("\n‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: \(String(format: "%.1f", avgCompletionTime)) —á–∞—Å–æ–≤")
            
            let priorityStats = priorityStatistics()
            print("\nüèÜ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:")
            for (priority, count) in priorityStats {
                print("\(priority.symbol): \(count) –∑–∞–¥–∞—á (\(percentage(count, of: completedTasks.count))%)")
            }
        }
    }
    
    private func averageCompletionTime() -> Double {
        let completedTasks = tasks.filter { $0.isCompleted && $0.completionDate != nil }
        let totalHours = completedTasks.reduce(0.0) { result, task in
            let hours = task.completionDate!.timeIntervalSince(task.creationDate) / 3600
            return result + hours
        }
        return totalHours / Double(completedTasks.count)
    }
    
    private func priorityStatistics() -> [(priority: Task.Priority, count: Int)] {
        let completedTasks = tasks.filter { $0.isCompleted }
        var stats = [Task.Priority: Int]()
        
        for priority in Task.Priority.allCases {
            stats[priority] = completedTasks.filter { $0.priority == priority }.count
        }
        
        return stats.map { (priority: $0.key, count: $0.value) }
                   .sorted { $0.priority.rawValue > $1.priority.rawValue }
    }
    
    private func percentage(_ part: Int, of total: Int) -> Double {
        guard total > 0 else { return 0 }
        return (Double(part) / Double(total)) * 100
    }
    
    // MARK: - –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
    
    private func saveTasks() {
        do {
            let data = try JSONEncoder().encode(tasks)
            try data.write(to: fileURL)
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á: \(error.localizedDescription)")
        }
    }
    
    private func loadTasks() {
        guard FileManager.default.fileExists(atPath: fileURL.path) else { return }
        
        do {
            let data = try Data(contentsOf: fileURL)
            tasks = try JSONDecoder().decode([Task].self, from: data)
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: \(error.localizedDescription)")
        }
    }
}

// MARK: - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

private let dateFormatter: DateFormatter = {
    let formatter = DateFormatter()
    formatter.dateStyle = .short
    formatter.timeStyle = .short
    return formatter
}()

func runTaskManager() {
    let taskManager = TaskManager()
    print("""
    üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –£–º–Ω—ã–π –°–ø–∏—Å–æ–∫ –î–µ–ª!
    --------------------------------------
    """)
    
    while true {
        print("""
        \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        1. üìù –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
        2. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        3. ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        4. üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
        5. üìä –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        6. üö™ –í—ã–π—Ç–∏
        """)
        
        guard let choice = readLine(), let action = Int(choice) else {
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6")
            continue
        }
        
        switch action {
        case 1:
            taskManager.showAllTasks()
            
        case 2:
            print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
            guard let title = readLine(), !title.isEmpty else {
                print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                continue
            }
            
            print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1 - –Ω–∏–∑–∫–∏–π, 2 - —Å—Ä–µ–¥–Ω–∏–π, 3 - –≤—ã—Å–æ–∫–∏–π):")
            guard let priorityInput = readLine(),
                  let priorityValue = Int(priorityInput),
                  let priority = Task.Priority(rawValue: priorityValue) else {
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.")
                taskManager.addTask(title: title, priority: .medium)
                continue
            }
            
            taskManager.addTask(title: title, priority: priority)
            
        case 3:
            taskManager.showAllTasks()
            print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:")
            guard let indexInput = readLine(), let index = Int(indexInput) else {
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
                continue
            }
            taskManager.completeTask(at: index - 1)
            
        case 4:
            taskManager.showAllTasks()
            print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            guard let indexInput = readLine(), let index = Int(indexInput) else {
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
                continue
            }
            taskManager.deleteTask(at: index - 1)
            
        case 5:
            taskManager.showProductivityAnalytics()
            
        case 6:
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
            return
            
        default:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6")
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
runTaskManager()
