import Foundation
import Darwin // –î–ª—è sleep()

class VirtualPet {
    enum Mood: String, CaseIterable {
        case happy = "üòä"
        case hungry = "üçï"
        case sleepy = "üò¥"
        case bored = "ü•±"
        case angry = "üò†"
    }
    
    var name: String
    var health: Int = 100
    var hunger: Int = 0
    var energy: Int = 100
    var mood: Mood = .happy
    var age: Int = 0 // –≤ "—Ü–∏–∫–ª–∞—Ö"
    
    init(name: String) {
        self.name = name
        startAgingProcess()
    }
    
    private func startAgingProcess() {
        Timer.scheduledTimer(withTimeInterval: 10, repeats: true) { _ in
            self.age += 1
            self.updateStatus()
        }
    }
    
    private func updateStatus() {
        hunger = min(100, hunger + 5)
        energy = max(0, energy - 3)
        
        if hunger > 70 {
            mood = .hungry
        } else if energy < 20 {
            mood = .sleepy
        } else if age % 5 == 0 {
            mood = Mood.allCases.randomElement() ?? .happy
        }
        
        if hunger > 90 {
            health -= 5
        }
        
        health = min(100, max(0, health))
    }
    
    func feed() {
        hunger = max(0, hunger - 30)
        mood = .happy
        animateAction("\(name) –∫—É—à–∞–µ—Ç... –Ω—è–º-–Ω—è–º!")
    }
    
    func play() {
        guard energy > 10 else {
            print("\(name) —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è –∏–≥—Ä üò¥")
            return
        }
        
        energy -= 15
        hunger = min(100, hunger + 10)
        mood = [.happy, .happy, .bored].randomElement()!
        
        let games = ["–∏–≥—Ä–∞–µ—Ç —Å –º—è—á–æ–º", "–±–µ–≥–∞–µ—Ç –ø–æ –∫—Ä—É–≥—É", "–ø—Ä—è—á–µ—Ç—Å—è"]
        animateAction("\(name) \(games.randomElement()!) üéæ")
    }
    
    func sleep() {
        energy = 100
        hunger = min(100, hunger + 20)
        mood = .happy
        
        animateAction("üí§ \(name) —Å–ª–∞–¥–∫–æ —Å–ø–∏—Ç... Zzz")
        unistd.sleep(3)
        print("\(name) –ø—Ä–æ—Å–Ω—É–ª—Å—è –ø–æ–ª–Ω—ã–π —Å–∏–ª! ‚ö°")
    }
    
    func talk() {
        let responses = [
            "\(name) —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –≤–∞—Å —Å –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ–º",
            "\(name) –∏–∑–¥–∞–µ—Ç —Ä–∞–¥–æ—Å—Ç–Ω—ã–π –∑–≤—É–∫",
            "\(name) –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ–≤—É",
            "\(mood.rawValue) \(name): \(randomPetSound())"
        ]
        
        print(responses.randomElement()!)
    }
    
    private func randomPetSound() -> String {
        let sounds = ["–ú—è—É!", "–ì–∞–≤!", "–ü–∏–ø!", "–ë—É—Ä-–±—É—Ä!", "–®—à—à!", "–£–∏–∏–∏!"]
        return sounds.randomElement()!
    }
    
    private func animateAction(_ action: String) {
        print("\n", terminator: "")
        for _ in 0..<3 {
            print("‚ñ∂Ô∏è", terminator: "")
            fflush(stdout)
            usleep(300000)
        }
        print(" \(action)")
    }
    
    func status() {
        print("""
        \n–°—Ç–∞—Ç—É—Å \(name):
        –ó–¥–æ—Ä–æ–≤—å–µ: \(health)% \(healthIndicator(health))
        –°—ã—Ç–æ—Å—Ç—å: \(100 - hunger)% \(hungerIndicator(hunger))
        –≠–Ω–µ—Ä–≥–∏—è: \(energy)% \(energyIndicator(energy))
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: \(mood.rawValue)
        –í–æ–∑—Ä–∞—Å—Ç: \(age)
        """)
    }
    
    private func healthIndicator(_ value: Int) -> String {
        let filled = Int(Double(value) / 10.0)
        return String(repeating: "‚ù§Ô∏è", count: filled) + String(repeating: "üñ§", count: 10 - filled)
    }
    
    private func hungerIndicator(_ value: Int) -> String {
        let filled = Int(Double(100 - value) / 10.0)
        return String(repeating: "üçó", count: filled) + String(repeating: "üçΩÔ∏è", count: 10 - filled)
    }
    
    private func energyIndicator(_ value: Int) -> String {
        let filled = Int(Double(value) / 10.0)
        return String(repeating: "‚ö°", count: filled) + String(repeating: "üîã", count: 10 - filled)
    }
}

func runVirtualPet() {
    print("""
    üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ü–∏—Ç–æ–º—Ü–∞! üêæ
    ------------------------------------------
    """)
    
    print("–î–∞–π—Ç–µ –∏–º—è –≤–∞—à–µ–º—É –ø–∏—Ç–æ–º—Ü—É:")
    guard let name = readLine(), !name.isEmpty else {
        print("–ë–µ–∑ –∏–º–µ–Ω–∏ –Ω–∏–∫–∞–∫! –î–∞–≤–∞–π—Ç–µ –Ω–∞–∑–æ–≤–µ–º –µ–≥–æ... –®–∞—Ä–∏–∫!")
        sleep(1)
        return runVirtualPet()
    }
    
    let pet = VirtualPet(name: name)
    
    print("\n–û—Ç–ª–∏—á–Ω–æ! \(name) —Ä–∞–¥ –≤—Å—Ç—Ä–µ—á–µ —Å –≤–∞–º–∏! \(pet.mood.rawValue)")
    
    while true {
        print("""
        \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        1. üçé –ü–æ–∫–æ—Ä–º–∏—Ç—å
        2. üéæ –ü–æ–∏–≥—Ä–∞—Ç—å
        3. üí§ –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å
        4. üó£Ô∏è –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å
        5. üìä –°—Ç–∞—Ç—É—Å
        6. üö™ –í—ã–π—Ç–∏
        """)
        
        guard let choice = readLine(), let action = Int(choice) else {
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6")
            continue
        }
        
        switch action {
        case 1:
            pet.feed()
        case 2:
            pet.play()
        case 3:
            pet.sleep()
        case 4:
            pet.talk()
        case 5:
            pet.status()
        case 6:
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! \(pet.name) –±—É–¥–µ—Ç —Å–∫—É—á–∞—Ç—å! üò¢")
            return
        default:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6")
        }
        
        // –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        if Int.random(in: 1...10) == 1 {
            randomEvent(for: pet)
        }
    }
}

func randomEvent(for pet: VirtualPet) {
    let events = [
        { print("üåü \(pet.name) –Ω–∞—à–µ–ª —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!") },
        { print("üí® \(pet.name) —É–≤–∏–¥–µ–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞—à–Ω–æ–µ –∏ –∏—Å–ø—É–≥–∞–ª—Å—è!") },
        { print("üéâ \(pet.name) –æ—á–µ–Ω—å —Ä–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!") },
        {
            pet.mood = .angry
            print("üò† \(pet.name) —Ä–∞–∑–æ–∑–ª–∏–ª—Å—è –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã!")
        }
    ]
    
    events.randomElement()?()
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
runVirtualPet()
